name: Deploy Azure Policy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        working-directory: terraformname: Azure Policy CI/CD

on:
  # Trigger on pull requests to main (for validation)
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
      - 'policy/**'
      - '.github/workflows/**'

  # Trigger on merge to main (for deployment)
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - 'policy/**'

  # Allow manual trigger for emergency deployments
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production

# Set permissions for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  # Validation job for Pull Requests
  validate:
    name: 'Terraform Validate & Plan'
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format Check
        id: fmt
        working-directory: terraform
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        working-directory: terraform
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: terraform
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Comment PR with Plan Results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Fail on Plan Error
        if: steps.plan.outcome == 'failure'
        run: exit 1

  # Security and Compliance Checks
  security-scan:
    name: 'Security & Compliance Scan'
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Checkov (Policy as Code Security)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          download_external_modules: true
        continue-on-error: true

      - name: Policy JSON Validation
        run: |
          # Validate JSON syntax in policy files
          find policy/ -name "*.json" -type f -exec echo "Validating {}" \; -exec python -m json.tool {} /dev/null \;

  # Deployment job for main branch
  deploy:
    name: 'Deploy to Azure'
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://portal.azure.com
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: terraform
        run: terraform plan -no-color -input=false -out=tfplan

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Policy Deployment Notification
        if: success()
        run: |
          echo "‚úÖ Azure Policy successfully deployed to subscription"
          echo "Policy Name: Allow Only East US Region"
          echo "Scope: Subscription Level"
          echo "Effect: Deny resources outside East US"

  # Manual workflow trigger
  manual-deploy:
    name: 'Manual Deploy'
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment }}
      url: https://portal.azure.com
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -no-color -input=false

      - name: Manual Deployment Confirmation
        run: |
          echo "üöÄ Manual deployment triggered by: ${{ github.actor }}"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Branch: ${{ github.ref_name }}"

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        run: terraform init
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -input=false
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}    

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve -input=false
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
